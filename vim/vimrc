syntax enable
syntax on
colorscheme desert

set number
set autoindent
set autoread
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab "if want to insert tab, on insert mode, <C-V>, tab
set list listchars=tab:>- ":retab

set ruler
set showmatch
set nobackup
set noswapfile
set hlsearch
set incsearch
set bs=2

set cursorline
set cursorcolumn
set statusline=%h%=%-14.(%l,%c%V%)\%<%p%%\\\%{strftime('%y-%m-%d\ %A')}
set encoding=utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030,latin-1
set fileencoding=utf-8

filetype on
filetype plugin on
let mapleader = ","

let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>
nmap fl :Tlist<cr>

let g:alternateExtensions_CPP = "inc,h,H,HPP,hpp"

"netrw setting
nmap <silent> <leader>fe :Vexplore!<cr>

"search word in document
nnoremap <silent> <F3> :lv /\<<c-r>=expand("<cword>")<cr>\>/j %<cr>:lw<cr>

"ConqueTerm setting
noremap <leader>sh :ConqueTerm bash<cr>
noremap <leader>shs :ConqueTermSplit bash<cr>
noremap <leader>shv :ConqueTermVSplit bash<cr>
noremap <leader>sht :ConqueTermTab bash<cr>
" Enable colors. Setting this to 0 will make your terminal faster.
let g:ConqueTerm_Color = 1
" Set your terminal type. I strong recommend leaving this as vt100, 
" however more features may be enabled with xterm.
let g:ConqueTerm_TERM = 'xterm' 
" Set buffer syntax. Conque has highlighting for MySQL, but not much else.
let g:ConqueTerm_Syntax = 'conque'
" Continue updating shell when it's not the current, focused buffer
let g:ConqueTerm_ReadUnfocused = 1

"compile single file
au FileType c set makeprg=gcc\ %
au FIleType cpp set makeprg=g++ %

nmap <leader>ee :e ~/.vimrc<cr>
nnoremap <C-TAB> <C-W>w

if has("win32")
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif

function! MaximizeWindow()
    "wmctrl need install.
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction

function AddTitle()
    call append(0,"/*=============================================================================")
    call append(1,"#")
    call append(2,"# Author: baowanxiang - baoanxiang@163.com")
    call append(3,"#")
    call append(4,"#")
    call append(5,"# Last modified: ".strftime("%Y-%m-%d %H:%M"))
    call append(6,"#")
    call append(7,"# Filename: ".expand("%:t"))
    call append(8,"#")
    call append(9,"# Description: ")
    call append(10,"#")
    call append(11,"=============================================================================*/")
        echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

function UpdateTitle()
    normal m'
    execute '/# *Last modified:/s@:.*$@\=strftime(":\t%Y-%m-%d %H:%M")@'
    normal '
    normal mk
    execute '/# *Filename:/s@:.*$@\=":\t\t".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function TitleDet()
    let n=1
    while n < 10
        let line = getline(n)
        if line =~ '^\#\s*\S*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n = n + 1
    endwhile
    call AddTitle()
endfunction

function InsertHeadDef(firstLine, lastLine)
    if a:firstLine <1 || a:lastLine> line('$')
        echoerr 'InsertHeadDef : Range overflow !(FirstLine:'.a:firstLine.';LastLine:'.a:lastLine.';ValidRange:1~'.line('$').')'
        return ''
    endif
    let sourcefilename=expand("%:t")
    let definename=substitute(sourcefilename,' ','','g')
    let definename=substitute(definename,'\.','_','g')
    let definename = toupper(definename)
    exe 'normal '.a:firstLine.'GO'
    call setline('.', '#ifndef _'.definename."_")
    normal ==o
    call setline('.', '#define _'.definename."_")
    exe 'normal =='.(a:lastLine-a:firstLine+1).'jo'
    call setline('.', '#endif')
    let goLn = a:firstLine+2
    exe 'normal =='.goLn.'G'
endfunction

function InsertHeadDefN()
    let firstLine = 1
    let lastLine = line('$')
    let n=1
    while n < 20
        let line = getline(n)
        if n==1 
            if line =~ '^\/\*.*$'
                let n = n + 1
                continue
            else
                break
            endif
        endif
        if line =~ '^.*\*\/$'
            let firstLine = n+1
            break
        endif
        let n = n + 1
    endwhile
    call InsertHeadDef(firstLine, lastLine)
endfunction

nmap <F4> :call TitleDet()<CR>
nmap <leader>ha :call InsertHeadDefN()<CR>
